// Code generated for package generated by go-bindata DO NOT EDIT. (@generated)
// sources:
// internal/bindata/lca-rollback-csr-approver.service
// internal/bindata/lca-rollback-csr-approver.sh
package generated

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _lcaRollbackCsrApproverService = []byte(`[Unit]
Description=Lifecycle Agent Rollback CSR Approver
After=kubelet.service

[Service]
ExecStart=/usr/local/bin/lca-rollback-csr-approver.sh

[Install]
WantedBy=multi-user.target
`)

func lcaRollbackCsrApproverServiceBytes() ([]byte, error) {
	return _lcaRollbackCsrApproverService, nil
}

func lcaRollbackCsrApproverService() (*asset, error) {
	bytes, err := lcaRollbackCsrApproverServiceBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lca-rollback-csr-approver.service", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _lcaRollbackCsrApproverSh = []byte(`#!/bin/bash
#
# This utility is installed by the lifecycle-agent during an upgrade to handle
# the scenario where control plane certificates are expired on the original stateroot
# when rolling back. It is setup as a service-unit in the original stateroot during
# the LCA pre-pivot upgrade handler so that it only runs on a rollback, and is removed
# by the LCA rollback completion handler.
#
# From the original stateroot point of view, a rollback effectively just a recovery from
# having the node out-of-service for a possibly extended period of time. Especially when
# running an IBU within the first 24 hours of deploying a cluster, this means the control
# plane certificates for the original release may be expired when the rollback is triggered.
#
# Once launched, this utility will poll for Pending CSRs and approve them. This will ensure
# the control plane will be able to recover and schedule pods, allowing LCA to then complete
# the rollback. The LCA rollback completion handler will then shutdown, disable, and delete
# this service-unit and script.
#
# For reference on approving pending CSRs, see:
# https://access.redhat.com/documentation/en-us/openshift_container_platform/4.15/html/machine_management/adding-rhel-compute#installation-approve-csrs_adding-rhel-compute

declare PROG=
PROG=$(basename "$0")

# shellcheck source=/dev/null
source /etc/kubernetes/static-pod-resources/etcd-certs/configmaps/etcd-scripts/etcd-common-tools

function log {
    echo "${PROG}: $*"
}

function approve_pending_csrs {
    mapfile -t csrs < <( oc get csr -o go-template='{{range .items}}{{if not .status}}{{.metadata.name}}{{"\n"}}{{end}}{{end}}' 2>/dev/null )
    if [ ${#csrs[@]} -gt 0 ]; then
        log "Found ${#csrs[@]} pending CSRs"
        for csr in "${csrs[@]}"; do
            log "Approving CSR: ${csr}"
            oc adm certificate approve "${csr}"
        done
    fi
}

# LCA will shutdown this service-unit as part of rollback completion. Until then, loop over csr approvals
while :; do
    approve_pending_csrs
    sleep 20
done

`)

func lcaRollbackCsrApproverShBytes() ([]byte, error) {
	return _lcaRollbackCsrApproverSh, nil
}

func lcaRollbackCsrApproverSh() (*asset, error) {
	bytes, err := lcaRollbackCsrApproverShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lca-rollback-csr-approver.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"lca-rollback-csr-approver.service": lcaRollbackCsrApproverService,
	"lca-rollback-csr-approver.sh":      lcaRollbackCsrApproverSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"lca-rollback-csr-approver.service": {lcaRollbackCsrApproverService, map[string]*bintree{}},
	"lca-rollback-csr-approver.sh":      {lcaRollbackCsrApproverSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
